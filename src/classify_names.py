import re
from tree import *

discriminators = feature_collection(
    regex_feature("i", "I", should_match=("irene", "patricia")),
    regex_feature("P", "^P", should_match=("Peter",), dont_match=("dunphy",)),
    regex_feature("ee", "e.+e", should_match=("Peter",), dont_match=("peet",)),
    regex_feature("a$", "a$", should_match=("patricia",), dont_match=("park",)),
    regex_feature("er$", "er$", should_match=("peter",), dont_match=("ferd",)),
    regex_feature("second_i", "^.i", should_match=("tina",), dont_match=("patricia",)),
    regex_feature("second_i2", "^.i.*[aeiouy]$", should_match=("tina",), dont_match=("patricia",)),
    regex_feature("ie$", "ie$"),
    regex_feature("th$", "th$"),    
    regex_feature("ia$", "ia$"),
    regex_feature("4letters", "^....$"),
    regex_feature("8letters", "^.........$"),
#    regex_feature("ia", "ia"),
    regex_feature("endiny", "y$"),
    regex_feature("endini", "i$"),
    regex_feature("3_vowels", "([aeiouy]+[^aeiouy]*){3}"),
    regex_feature("3rd2lasti", "i.[aeiouy]$"),
#    regex_feature("ends_in_vowel", "[aeiou]$"),
#    
#    regex_feature("starts_in_non_vowel", "^[^aeiou]"),

    default_field="name"
)


freq_sample = 100


def get_rows():
    splitter = re.compile(r'\s+').split
    for gender in ('male', 'female'):
        datareader = open('dist.' + gender + '.first')
        i = 0
        
        for dataline in datareader:
            datarow = splitter(dataline)
            #print datarow
            
            name = datarow[0].lower()
            freq = float(datarow[1])
            
            
            print name, classify(name), gender
            #for _ in xrange(int(freq * freq_sample)):
            yield {'name': name,
                       '__CLASS__': gender}
        
            i += 1
            if i > freq_sample:
                break

def classify(name):
    # auto-generated by '/Users/nick/Documents/workspace/cart_tree/src/classify_names.py' on 2010-04-19 15:18:24 
    if re.compile('i.[aeiouy]$').search(name):
        return 'female'
    else:
        if re.compile('^.........$').search(name):
            return 'female'
        else:
            if not re.compile('([aeiouy]+[^aeiouy]*){3}').search(name):
                if not re.compile('^....$').search(name):
                    return 'male'
                else:
                    return 'male'
            else:
                return 'female'

#
#training_set = discriminators.build_training_set(get_rows())
#
#tree = discriminators.buildtree(training_set)
#
#tree.printme()
#
#tree.print_python_classifier('classify', '    ')
#
#tree.print_mysql_classifier('classify')
#
#print tree.expected_error()

import unittest
import MySQLdb
db = MySQLdb.connect()
unittest.TextTestRunner(verbosity=1).run(discriminators.get_test_suite(db))